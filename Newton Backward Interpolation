Q) Implementation Newton Backward Interpolation Using C programming.
ans: 
/*	Newton Backward Interpolation Formula: -
 
				     u(u-1)  	   u(u+1)(u+2)               u(u+1)(u+2)(u+ n-1) 
		   f(x)= Y0 + u*Y1 + ------ * Y2 + ----------- * Y3 +......+ ------------------- * Yn
		                       2!             3!                             n!
                         
*/  


#include<stdio.h>
int fact(int n){
	int f=1,i;
	for(i=2;i<=n;i++)	f=f*i;
	return f;
}
int main(){
	float x[10],y[10][10],u,sum,term,value,h;
	int n,i,j;
	printf("Enter The Elemnt: ");
	scanf("%d",&n);
	
	for(i=0;i<n;i++){
		printf("Enter the values of X[%d]: ",i);
		scanf("%f",&x[i]);
		printf("Enter the values of f(x[%d])=y: ",i);
		scanf("%f",&y[i][0]);
	}
	
	printf("\nEnter the value of X to interpolate: ");
	scanf("%f",&value);	
	
	//Newton Backward Difference Table
	for(i=1;i<n;i++){
		for(j=n-1;j>=i;j--){
			y[j][i]=y[j][i-1]-y[j-1][i-1];
		}
	}
	
	//Display Backward Difference Table
	printf("\nBackward Difference Table\n");
	printf("----------------------------\n");
	printf("x\tf(x)");
	for(i=1;i<n;i++)	printf("\td^%dy",i);
	printf("\n");
	
	for(i=0;i<n;i++){
		printf("%.2f",x[i]);
		for(j=0;j<=i;j++){
			printf("\t%.2f",y[i][j]);
		}
		printf("\n");
	}
	
	// Apply Newton Backward Interpolation 
	h=x[1]-x[0];
	u=(value-x[n-1])/h;
	sum=y[n-1][0];
	term=1;
	for(i=1;i<n;i++){
		term=term*(u+(i-1));
		sum=sum+(term*y[n-1][i])/fact(i);
	}
	
	printf("\nInterpolated value at X= %.2f is %.4f",value,sum); 
	return 0;
}
